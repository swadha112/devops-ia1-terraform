Last login: Tue Sep 23 00:21:38 on ttys006
cd 	%                                                                       (base) swadhakhatod@Swadhas-MacBook-Air ~ % cd Desktop                      
(base) swadhakhatod@Swadhas-MacBook-Air Desktop % cd devops-ia1-terraform 
(base) swadhakhatod@Swadhas-MacBook-Air devops-ia1-terraform % chmod +x localstack_setup.sh && ./localstack_setup.sh
🚀 Setting up Terraform + LocalStack Demo...
📋 Checking prerequisites...
❌ Docker is not running. Please start Docker Desktop
(base) swadhakhatod@Swadhas-MacBook-Air devops-ia1-terraform % chmod +x localstack_setup.sh && ./localstack_setup.sh
🚀 Setting up Terraform + LocalStack Demo...
📋 Checking prerequisites...
✅ Docker is running
✅ Python 3 found
✅ Terraform installed: 1.13.3
📦 Installing LocalStack...
Collecting localstack
  Downloading localstack-4.8.1.tar.gz (5.9 kB)
  Preparing metadata (setup.py) ... done
Collecting terraform-local
  Downloading terraform_local-0.24.1-py3-none-any.whl.metadata (7.6 kB)
Collecting localstack-core (from localstack)
  Downloading localstack_core-4.8.1-py3-none-any.whl.metadata (5.5 kB)
Collecting localstack-ext==4.8.1 (from localstack)
  Downloading localstack_ext-4.8.1.tar.gz (8.4 MB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 8.4/8.4 MB 7.5 MB/s eta 0:00:00
  Installing build dependencies ... done
  Getting requirements to build wheel ... done
  Preparing metadata (pyproject.toml) ... done
Requirement already satisfied: dill>=0.3.2 in /opt/anaconda3/lib/python3.12/site-packages (from localstack-ext==4.8.1->localstack) (0.3.8)
Collecting dnslib>=0.9.10 (from localstack-ext==4.8.1->localstack)
  Downloading dnslib-0.9.26-py3-none-any.whl.metadata (19 kB)
Requirement already satisfied: dnspython>=1.16.0 in /opt/anaconda3/lib/python3.12/site-packages (from localstack-ext==4.8.1->localstack) (2.7.0)
Requirement already satisfied: packaging in /opt/anaconda3/lib/python3.12/site-packages (from localstack-ext==4.8.1->localstack) (24.1)
Collecting build (from localstack-ext==4.8.1->localstack)
  Downloading build-1.3.0-py3-none-any.whl.metadata (5.6 kB)
Collecting plux>=1.10.0 (from localstack-ext==4.8.1->localstack)
  Using cached plux-1.13.0-py3-none-any.whl.metadata (10 kB)
Collecting pyotp>=2.9.0 (from localstack-ext==4.8.1->localstack)
  Downloading pyotp-2.9.0-py3-none-any.whl.metadata (9.8 kB)
Requirement already satisfied: PyJWT>=1.7.0 in /opt/anaconda3/lib/python3.12/site-packages (from PyJWT[crypto]>=1.7.0->localstack-ext==4.8.1->localstack) (2.8.0)
Requirement already satisfied: requests>=2.20.0 in /opt/anaconda3/lib/python3.12/site-packages (from localstack-ext==4.8.1->localstack) (2.32.3)
Requirement already satisfied: python-dateutil>=2.8 in /opt/anaconda3/lib/python3.12/site-packages (from localstack-ext==4.8.1->localstack) (2.9.0.post0)
Requirement already satisfied: tabulate in /opt/anaconda3/lib/python3.12/site-packages (from localstack-ext==4.8.1->localstack) (0.9.0)
Collecting localstack-py-avro-schema>=3.9.1 (from localstack-ext==4.8.1->localstack)
  Downloading localstack_py_avro_schema-3.9.2-py3-none-any.whl.metadata (15 kB)
Collecting fastavro>=1.12.0 (from localstack-ext==4.8.1->localstack)
  Downloading fastavro-1.12.0-cp312-cp312-macosx_10_13_universal2.whl.metadata (5.7 kB)
Requirement already satisfied: click>=7.1 in /opt/anaconda3/lib/python3.12/site-packages (from localstack-core->localstack) (8.1.7)
Requirement already satisfied: cachetools>=5.0 in /opt/anaconda3/lib/python3.12/site-packages (from localstack-core->localstack) (5.3.3)
Requirement already satisfied: cryptography in /opt/anaconda3/lib/python3.12/site-packages (from localstack-core->localstack) (42.0.8)
Collecting dill>=0.3.2 (from localstack-ext==4.8.1->localstack)
  Downloading dill-0.3.6-py3-none-any.whl.metadata (9.8 kB)
Requirement already satisfied: psutil>=5.4.8 in /opt/anaconda3/lib/python3.12/site-packages (from localstack-core->localstack) (5.9.0)
Requirement already satisfied: python-dotenv>=0.19.1 in /opt/anaconda3/lib/python3.12/site-packages (from localstack-core->localstack) (0.21.0)
Requirement already satisfied: pyyaml>=5.1 in /opt/anaconda3/lib/python3.12/site-packages (from localstack-core->localstack) (6.0.1)
Requirement already satisfied: rich>=12.3.0 in /opt/anaconda3/lib/python3.12/site-packages (from localstack-core->localstack) (13.7.1)
Requirement already satisfied: semver>=2.10 in /opt/anaconda3/lib/python3.12/site-packages (from localstack-core->localstack) (3.0.2)
Collecting tailer>=0.4.1 (from localstack-core->localstack)
  Downloading tailer-0.4.1.tar.gz (7.5 kB)
  Preparing metadata (setup.py) ... done
Collecting localstack-client (from terraform-local)
  Downloading localstack_client-2.10.tar.gz (11 kB)
  Preparing metadata (setup.py) ... done
Collecting python-hcl2!=7.3.0 (from terraform-local)
  Downloading python_hcl2-7.3.1-py3-none-any.whl.metadata (5.2 kB)
Collecting lark<2.0,>=1.1.5 (from python-hcl2!=7.3.0->terraform-local)
  Downloading lark-1.3.0-py3-none-any.whl.metadata (1.8 kB)
Requirement already satisfied: regex>=2024.4.16 in /opt/anaconda3/lib/python3.12/site-packages (from python-hcl2!=7.3.0->terraform-local) (2024.9.11)
Collecting boto3 (from localstack-client->terraform-local)
  Downloading boto3-1.40.37-py3-none-any.whl.metadata (6.7 kB)
Collecting avro~=1.10 (from localstack-py-avro-schema>=3.9.1->localstack-ext==4.8.1->localstack)
  Downloading avro-1.12.0-py2.py3-none-any.whl.metadata (1.7 kB)
Collecting memoization~=0.4 (from localstack-py-avro-schema>=3.9.1->localstack-ext==4.8.1->localstack)
  Downloading memoization-0.4.0.tar.gz (41 kB)
  Preparing metadata (setup.py) ... done
Requirement already satisfied: more-itertools~=10.0 in /opt/anaconda3/lib/python3.12/site-packages (from localstack-py-avro-schema>=3.9.1->localstack-ext==4.8.1->localstack) (10.3.0)
Collecting orjson~=3.5 (from localstack-py-avro-schema>=3.9.1->localstack-ext==4.8.1->localstack)
  Downloading orjson-3.11.3-cp312-cp312-macosx_15_0_arm64.whl.metadata (41 kB)
Collecting typeguard==2.13.3 (from localstack-py-avro-schema>=3.9.1->localstack-ext==4.8.1->localstack)
  Downloading typeguard-2.13.3-py3-none-any.whl.metadata (3.6 kB)
Requirement already satisfied: cffi>=1.12 in /opt/anaconda3/lib/python3.12/site-packages (from cryptography->localstack-core->localstack) (1.17.1)
Requirement already satisfied: six>=1.5 in /opt/anaconda3/lib/python3.12/site-packages (from python-dateutil>=2.8->localstack-ext==4.8.1->localstack) (1.16.0)
Requirement already satisfied: charset-normalizer<4,>=2 in /opt/anaconda3/lib/python3.12/site-packages (from requests>=2.20.0->localstack-ext==4.8.1->localstack) (3.3.2)
Requirement already satisfied: idna<4,>=2.5 in /opt/anaconda3/lib/python3.12/site-packages (from requests>=2.20.0->localstack-ext==4.8.1->localstack) (3.7)
Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/anaconda3/lib/python3.12/site-packages (from requests>=2.20.0->localstack-ext==4.8.1->localstack) (2.2.3)
Requirement already satisfied: certifi>=2017.4.17 in /opt/anaconda3/lib/python3.12/site-packages (from requests>=2.20.0->localstack-ext==4.8.1->localstack) (2024.8.30)
Requirement already satisfied: markdown-it-py>=2.2.0 in /opt/anaconda3/lib/python3.12/site-packages (from rich>=12.3.0->localstack-core->localstack) (2.2.0)
Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /opt/anaconda3/lib/python3.12/site-packages (from rich>=12.3.0->localstack-core->localstack) (2.15.1)
Collecting botocore<1.41.0,>=1.40.37 (from boto3->localstack-client->terraform-local)
  Downloading botocore-1.40.37-py3-none-any.whl.metadata (5.7 kB)
Requirement already satisfied: jmespath<2.0.0,>=0.7.1 in /opt/anaconda3/lib/python3.12/site-packages (from boto3->localstack-client->terraform-local) (1.0.1)
Collecting s3transfer<0.15.0,>=0.14.0 (from boto3->localstack-client->terraform-local)
  Downloading s3transfer-0.14.0-py3-none-any.whl.metadata (1.7 kB)
Collecting pyproject_hooks (from build->localstack-ext==4.8.1->localstack)
  Downloading pyproject_hooks-1.2.0-py3-none-any.whl.metadata (1.3 kB)
Requirement already satisfied: pycparser in /opt/anaconda3/lib/python3.12/site-packages (from cffi>=1.12->cryptography->localstack-core->localstack) (2.21)
Requirement already satisfied: mdurl~=0.1 in /opt/anaconda3/lib/python3.12/site-packages (from markdown-it-py>=2.2.0->rich>=12.3.0->localstack-core->localstack) (0.1.0)
Downloading localstack_core-4.8.1-py3-none-any.whl (2.6 MB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 2.6/2.6 MB 6.2 MB/s eta 0:00:00
Downloading dill-0.3.6-py3-none-any.whl (110 kB)
Downloading terraform_local-0.24.1-py3-none-any.whl (16 kB)
Downloading python_hcl2-7.3.1-py3-none-any.whl (22 kB)
Downloading dnslib-0.9.26-py3-none-any.whl (64 kB)
Downloading fastavro-1.12.0-cp312-cp312-macosx_10_13_universal2.whl (944 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 944.3/944.3 kB 7.0 MB/s eta 0:00:00
Downloading lark-1.3.0-py3-none-any.whl (113 kB)
Downloading localstack_py_avro_schema-3.9.2-py3-none-any.whl (25 kB)
Downloading typeguard-2.13.3-py3-none-any.whl (17 kB)
Using cached plux-1.13.0-py3-none-any.whl (35 kB)
Downloading pyotp-2.9.0-py3-none-any.whl (13 kB)
Downloading boto3-1.40.37-py3-none-any.whl (139 kB)
Downloading build-1.3.0-py3-none-any.whl (23 kB)
Downloading avro-1.12.0-py2.py3-none-any.whl (124 kB)
Downloading botocore-1.40.37-py3-none-any.whl (14.0 MB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 14.0/14.0 MB 6.0 MB/s eta 0:00:00
Downloading orjson-3.11.3-cp312-cp312-macosx_15_0_arm64.whl (127 kB)
Downloading s3transfer-0.14.0-py3-none-any.whl (85 kB)
Downloading pyproject_hooks-1.2.0-py3-none-any.whl (10 kB)
Building wheels for collected packages: localstack, localstack-ext, localstack-client, tailer, memoization
  Building wheel for localstack (setup.py) ... done
  Created wheel for localstack: filename=localstack-4.8.1-py3-none-any.whl size=5595 sha256=54044293bc50f13a57808929e1ceb160f735126aa4a94e0039c8db7d0fe45136
  Stored in directory: /Users/swadhakhatod/Library/Caches/pip/wheels/8e/cc/2d/b81523caf7a6717d422c49f836e943bb92f1cf06dd871550f6
  Building wheel for localstack-ext (pyproject.toml) ... done
  Created wheel for localstack-ext: filename=localstack_ext-4.8.1-py3-none-any.whl size=8818335 sha256=8134e8c6f572854e13c1f7907a1f37660d4430ea38faeabbcac88d6c8367957a
  Stored in directory: /Users/swadhakhatod/Library/Caches/pip/wheels/96/72/09/45f9bbad0a670cd09bd7bcc87eab572f4989f3f189843457de
  Building wheel for localstack-client (setup.py) ... done
  Created wheel for localstack-client: filename=localstack_client-2.10-py3-none-any.whl size=10358 sha256=afc7b673c3b533c64aa47779c368a812d181ad8f8982ddbd34ec22c59ca3bf19
  Stored in directory: /Users/swadhakhatod/Library/Caches/pip/wheels/da/38/29/a82e034645ec6d1b9e3a4cf5082206075ac25fe8a9df32d45b
  Building wheel for tailer (setup.py) ... done
  Created wheel for tailer: filename=tailer-0.4.1-py3-none-any.whl size=5399 sha256=1183f4b4cecb1341991658d1db5a6277fc9777cc459f73e71258133ea99ba7c3
  Stored in directory: /Users/swadhakhatod/Library/Caches/pip/wheels/56/10/b3/9b55070a23f7689a4cde0d997e34884ee5d66a0255aa0d6a3f
  Building wheel for memoization (setup.py) ... done
  Created wheel for memoization: filename=memoization-0.4.0-py3-none-any.whl size=50453 sha256=7ec09cd515a45fd77896e30a87b5edcd4b89f3f1908bcafc63fc1660ecad1774
  Stored in directory: /Users/swadhakhatod/Library/Caches/pip/wheels/26/35/02/90618fc7cbf03a335f3cacd59d32b35930bf5a57f3c0d0814c
Successfully built localstack localstack-ext localstack-client tailer memoization
Installing collected packages: tailer, dnslib, typeguard, pyproject_hooks, pyotp, plux, orjson, memoization, lark, fastavro, dill, avro, python-hcl2, localstack-py-avro-schema, build, botocore, s3transfer, localstack-core, localstack-ext, boto3, localstack-client, localstack, terraform-local
  WARNING: The script pytail is installed in '/Users/swadhakhatod/.local/bin' which is not on PATH.
  Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.
  WARNING: The script fastavro is installed in '/Users/swadhakhatod/.local/bin' which is not on PATH.
  Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.
  WARNING: The script avro is installed in '/Users/swadhakhatod/.local/bin' which is not on PATH.
  Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.
  WARNING: The script hcl2tojson is installed in '/Users/swadhakhatod/.local/bin' which is not on PATH.
  Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.
  WARNING: The script pyproject-build is installed in '/Users/swadhakhatod/.local/bin' which is not on PATH.
  Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.
ERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.
aiobotocore 2.12.3 requires botocore<1.34.70,>=1.34.41, but you have botocore 1.40.37 which is incompatible.
Successfully installed avro-1.12.0 boto3-1.40.37 botocore-1.40.37 build-1.3.0 dill-0.3.6 dnslib-0.9.26 fastavro-1.12.0 lark-1.3.0 localstack-4.8.1 localstack-client-2.10 localstack-core-4.8.1 localstack-ext-4.8.1 localstack-py-avro-schema-3.9.2 memoization-0.4.0 orjson-3.11.3 plux-1.13.0 pyotp-2.9.0 pyproject_hooks-1.2.0 python-hcl2-7.3.1 s3transfer-0.14.0 tailer-0.4.1 terraform-local-0.24.1 typeguard-2.13.3
⚠️  Adding LocalStack to PATH...
✅ LocalStack installed
🐳 Starting LocalStack...

     __                     _______ __             __
    / /   ____  _________ _/ / ___// /_____ ______/ /__
   / /   / __ \/ ___/ __ `/ /\__ \/ __/ __ `/ ___/ //_/
  / /___/ /_/ / /__/ /_/ / /___/ / /_/ /_/ / /__/ ,<
 /_____/\____/\___/\__,_/_//____/\__/\__,_/\___/_/|_|

- LocalStack CLI: 4.8.1
- Profile: default
- App: https://app.localstack.cloud

[09:01:45] starting LocalStack in Docker mode 🐳                                                                                                                                               localstack.py:532
           preparing environment                                                                                                                                                               bootstrap.py:1315
[09:01:46] configuring container                                                                                                                                                               bootstrap.py:1324
           container image not found on host                                                                                                                                                   bootstrap.py:1304
[09:03:02] download complete                                                                                                                                                                   bootstrap.py:1308
           starting container                                                                                                                                                                  bootstrap.py:1334
[09:03:03] detaching                                                                                                                                                                           bootstrap.py:1338
⏳ Waiting for LocalStack to be ready...
✅ LocalStack is running!
🌐 LocalStack Web UI: http://localhost:4566
⚙️  Initializing Terraform...
Initializing the backend...
Initializing provider plugins...
- Finding hashicorp/archive versions matching "~> 2.4"...
- Finding latest version of hashicorp/random...
- Finding hashicorp/aws versions matching "~> 5.0"...
- Installing hashicorp/archive v2.7.1...
- Installed hashicorp/archive v2.7.1 (signed by HashiCorp)
- Installing hashicorp/random v3.7.2...
- Installed hashicorp/random v3.7.2 (signed by HashiCorp)
- Installing hashicorp/aws v5.100.0...
- Installed hashicorp/aws v5.100.0 (signed by HashiCorp)
Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
🎉 Setup complete!
Next steps:
1. Review the generated Terraform files
2. Run: tflocal plan
3. Run: tflocal apply
4. Test with the commands from terraform output

📚 Useful commands:
tflocal plan     - Preview changes
tflocal apply    - Apply changes
tflocal destroy  - Destroy infrastructure
localstack logs  - View LocalStack logs
localstack stop  - Stop LocalStack

🧪 Quick test:
awslocal s3 ls   - List S3 buckets (after terraform apply)
(base) swadhakhatod@Swadhas-MacBook-Air devops-ia1-terraform % tflocal apply
zsh: command not found: tflocal
(base) swadhakhatod@Swadhas-MacBook-Air devops-ia1-terraform % terraform apply
data.archive_file.lambda_zip: Reading...
data.archive_file.lambda_zip: Read complete after 0s [id=51bec10f9bd051956622551cd21a521e30c81a7c]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_dynamodb_table.user_data will be created
  + resource "aws_dynamodb_table" "user_data" {
      + arn              = (known after apply)
      + billing_mode     = "PAY_PER_REQUEST"
      + hash_key         = "user_id"
      + id               = (known after apply)
      + name             = "user-data-table"
      + read_capacity    = (known after apply)
      + stream_arn       = (known after apply)
      + stream_label     = (known after apply)
      + stream_view_type = (known after apply)
      + tags             = {
          + "Environment" = "development"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "UserDataTable"
        }
      + tags_all         = {
          + "Environment" = "development"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "UserDataTable"
        }
      + write_capacity   = (known after apply)

      + attribute {
          + name = "user_id"
          + type = "S"
        }

      + point_in_time_recovery (known after apply)

      + server_side_encryption (known after apply)

      + ttl (known after apply)
    }

  # aws_dynamodb_table_item.sample_user_1 will be created
  + resource "aws_dynamodb_table_item" "sample_user_1" {
      + hash_key   = "user_id"
      + id         = (known after apply)
      + item       = jsonencode(
            {
              + created_at = {
                  + S = "2024-01-15T10:30:00Z"
                }
              + email      = {
                  + S = "john.doe@example.com"
                }
              + name       = {
                  + S = "John Doe"
                }
              + status     = {
                  + S = "active"
                }
              + user_id    = {
                  + S = "user-001"
                }
            }
        )
      + table_name = "user-data-table"
    }

  # aws_dynamodb_table_item.sample_user_2 will be created
  + resource "aws_dynamodb_table_item" "sample_user_2" {
      + hash_key   = "user_id"
      + id         = (known after apply)
      + item       = jsonencode(
            {
              + created_at = {
                  + S = "2024-01-16T14:22:00Z"
                }
              + email      = {
                  + S = "jane.smith@example.com"
                }
              + name       = {
                  + S = "Jane Smith"
                }
              + status     = {
                  + S = "active"
                }
              + user_id    = {
                  + S = "user-002"
                }
            }
        )
      + table_name = "user-data-table"
    }

  # aws_iam_role.lambda_role will be created
  + resource "aws_iam_role" "lambda_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "terraform-lambda-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # aws_iam_role_policy.lambda_policy will be created
  + resource "aws_iam_role_policy" "lambda_policy" {
      + id          = (known after apply)
      + name        = "terraform-lambda-policy"
      + name_prefix = (known after apply)
      + policy      = (known after apply)
      + role        = (known after apply)
    }

  # aws_lambda_function.demo_function will be created
  + resource "aws_lambda_function" "demo_function" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + code_sha256                    = (known after apply)
      + filename                       = "lambda.zip"
      + function_name                  = "terraform-demo-function"
      + handler                        = "lambda_function.handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + package_type                   = "Zip"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = (known after apply)
      + runtime                        = "python3.9"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = "xJLnw0K+JKr8qU06ZgxoVv6A8JGaLAm0dtLwPghoIgo="
      + source_code_size               = (known after apply)
      + tags                           = {
          + "Environment" = "development"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "DemoLambdaFunction"
        }
      + tags_all                       = {
          + "Environment" = "development"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "DemoLambdaFunction"
        }
      + timeout                        = 30
      + version                        = (known after apply)

      + environment {
          + variables = (known after apply)
        }

      + ephemeral_storage (known after apply)

      + logging_config (known after apply)

      + tracing_config (known after apply)
    }

  # aws_s3_bucket.app_storage will be created
  + resource "aws_s3_bucket" "app_storage" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = (known after apply)
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags_all                    = (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

  # aws_s3_bucket_public_access_block.app_storage_pab will be created
  + resource "aws_s3_bucket_public_access_block" "app_storage_pab" {
      + block_public_acls       = true
      + block_public_policy     = true
      + bucket                  = (known after apply)
      + id                      = (known after apply)
      + ignore_public_acls      = true
      + restrict_public_buckets = true
    }

  # aws_s3_bucket_versioning.app_storage_versioning will be created
  + resource "aws_s3_bucket_versioning" "app_storage_versioning" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + versioning_configuration {
          + mfa_delete = (known after apply)
          + status     = "Enabled"
        }
    }

  # aws_s3_object.readme will be created
  + resource "aws_s3_object" "readme" {
      + acl                    = (known after apply)
      + arn                    = (known after apply)
      + bucket                 = (known after apply)
      + bucket_key_enabled     = (known after apply)
      + checksum_crc32         = (known after apply)
      + checksum_crc32c        = (known after apply)
      + checksum_crc64nvme     = (known after apply)
      + checksum_sha1          = (known after apply)
      + checksum_sha256        = (known after apply)
      + content                = (known after apply)
      + content_type           = "text/markdown"
      + etag                   = (known after apply)
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "README.md"
      + kms_key_id             = (known after apply)
      + server_side_encryption = (known after apply)
      + storage_class          = (known after apply)
      + tags_all               = (known after apply)
      + version_id             = (known after apply)
    }

  # aws_s3_object.sample_config will be created
  + resource "aws_s3_object" "sample_config" {
      + acl                    = (known after apply)
      + arn                    = (known after apply)
      + bucket                 = (known after apply)
      + bucket_key_enabled     = (known after apply)
      + checksum_crc32         = (known after apply)
      + checksum_crc32c        = (known after apply)
      + checksum_crc64nvme     = (known after apply)
      + checksum_sha1          = (known after apply)
      + checksum_sha256        = (known after apply)
      + content                = (known after apply)
      + content_type           = "application/json"
      + etag                   = (known after apply)
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "config/application.json"
      + kms_key_id             = (known after apply)
      + server_side_encryption = (known after apply)
      + storage_class          = (known after apply)
      + tags_all               = (known after apply)
      + version_id             = (known after apply)
    }

  # random_string.bucket_suffix will be created
  + resource "random_string" "bucket_suffix" {
      + id          = (known after apply)
      + length      = 8
      + lower       = true
      + min_lower   = 0
      + min_numeric = 0
      + min_special = 0
      + min_upper   = 0
      + number      = true
      + numeric     = true
      + result      = (known after apply)
      + special     = false
      + upper       = false
    }

Plan: 12 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + dynamodb_table_arn   = (known after apply)
  + dynamodb_table_name  = "user-data-table"
  + lambda_function_arn  = (known after apply)
  + lambda_function_name = "terraform-demo-function"
  + s3_bucket_arn        = (known after apply)
  + s3_bucket_name       = (known after apply)
  + test_commands        = (known after apply)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: 47 

Apply cancelled.
(base) swadhakhatod@Swadhas-MacBook-Air devops-ia1-terraform % terraform apply
data.archive_file.lambda_zip: Reading...
data.archive_file.lambda_zip: Read complete after 0s [id=51bec10f9bd051956622551cd21a521e30c81a7c]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_dynamodb_table.user_data will be created
  + resource "aws_dynamodb_table" "user_data" {
      + arn              = (known after apply)
      + billing_mode     = "PAY_PER_REQUEST"
      + hash_key         = "user_id"
      + id               = (known after apply)
      + name             = "user-data-table"
      + read_capacity    = (known after apply)
      + stream_arn       = (known after apply)
      + stream_label     = (known after apply)
      + stream_view_type = (known after apply)
      + tags             = {
          + "Environment" = "development"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "UserDataTable"
        }
      + tags_all         = {
          + "Environment" = "development"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "UserDataTable"
        }
      + write_capacity   = (known after apply)

      + attribute {
          + name = "user_id"
          + type = "S"
        }

      + point_in_time_recovery (known after apply)

      + server_side_encryption (known after apply)

      + ttl (known after apply)
    }

  # aws_dynamodb_table_item.sample_user_1 will be created
  + resource "aws_dynamodb_table_item" "sample_user_1" {
      + hash_key   = "user_id"
      + id         = (known after apply)
      + item       = jsonencode(
            {
              + created_at = {
                  + S = "2024-01-15T10:30:00Z"
                }
              + email      = {
                  + S = "john.doe@example.com"
                }
              + name       = {
                  + S = "John Doe"
                }
              + status     = {
                  + S = "active"
                }
              + user_id    = {
                  + S = "user-001"
                }
            }
        )
      + table_name = "user-data-table"
    }

  # aws_dynamodb_table_item.sample_user_2 will be created
  + resource "aws_dynamodb_table_item" "sample_user_2" {
      + hash_key   = "user_id"
      + id         = (known after apply)
      + item       = jsonencode(
            {
              + created_at = {
                  + S = "2024-01-16T14:22:00Z"
                }
              + email      = {
                  + S = "jane.smith@example.com"
                }
              + name       = {
                  + S = "Jane Smith"
                }
              + status     = {
                  + S = "active"
                }
              + user_id    = {
                  + S = "user-002"
                }
            }
        )
      + table_name = "user-data-table"
    }

  # aws_iam_role.lambda_role will be created
  + resource "aws_iam_role" "lambda_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "terraform-lambda-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # aws_iam_role_policy.lambda_policy will be created
  + resource "aws_iam_role_policy" "lambda_policy" {
      + id          = (known after apply)
      + name        = "terraform-lambda-policy"
      + name_prefix = (known after apply)
      + policy      = (known after apply)
      + role        = (known after apply)
    }

  # aws_lambda_function.demo_function will be created
  + resource "aws_lambda_function" "demo_function" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + code_sha256                    = (known after apply)
      + filename                       = "lambda.zip"
      + function_name                  = "terraform-demo-function"
      + handler                        = "lambda_function.handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + package_type                   = "Zip"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = (known after apply)
      + runtime                        = "python3.9"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = "xJLnw0K+JKr8qU06ZgxoVv6A8JGaLAm0dtLwPghoIgo="
      + source_code_size               = (known after apply)
      + tags                           = {
          + "Environment" = "development"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "DemoLambdaFunction"
        }
      + tags_all                       = {
          + "Environment" = "development"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "DemoLambdaFunction"
        }
      + timeout                        = 30
      + version                        = (known after apply)

      + environment {
          + variables = (known after apply)
        }

      + ephemeral_storage (known after apply)

      + logging_config (known after apply)

      + tracing_config (known after apply)
    }

  # aws_s3_bucket.app_storage will be created
  + resource "aws_s3_bucket" "app_storage" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = (known after apply)
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags_all                    = (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

  # aws_s3_bucket_public_access_block.app_storage_pab will be created
  + resource "aws_s3_bucket_public_access_block" "app_storage_pab" {
      + block_public_acls       = true
      + block_public_policy     = true
      + bucket                  = (known after apply)
      + id                      = (known after apply)
      + ignore_public_acls      = true
      + restrict_public_buckets = true
    }

  # aws_s3_bucket_versioning.app_storage_versioning will be created
  + resource "aws_s3_bucket_versioning" "app_storage_versioning" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + versioning_configuration {
          + mfa_delete = (known after apply)
          + status     = "Enabled"
        }
    }

  # aws_s3_object.readme will be created
  + resource "aws_s3_object" "readme" {
      + acl                    = (known after apply)
      + arn                    = (known after apply)
      + bucket                 = (known after apply)
      + bucket_key_enabled     = (known after apply)
      + checksum_crc32         = (known after apply)
      + checksum_crc32c        = (known after apply)
      + checksum_crc64nvme     = (known after apply)
      + checksum_sha1          = (known after apply)
      + checksum_sha256        = (known after apply)
      + content                = (known after apply)
      + content_type           = "text/markdown"
      + etag                   = (known after apply)
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "README.md"
      + kms_key_id             = (known after apply)
      + server_side_encryption = (known after apply)
      + storage_class          = (known after apply)
      + tags_all               = (known after apply)
      + version_id             = (known after apply)
    }

  # aws_s3_object.sample_config will be created
  + resource "aws_s3_object" "sample_config" {
      + acl                    = (known after apply)
      + arn                    = (known after apply)
      + bucket                 = (known after apply)
      + bucket_key_enabled     = (known after apply)
      + checksum_crc32         = (known after apply)
      + checksum_crc32c        = (known after apply)
      + checksum_crc64nvme     = (known after apply)
      + checksum_sha1          = (known after apply)
      + checksum_sha256        = (known after apply)
      + content                = (known after apply)
      + content_type           = "application/json"
      + etag                   = (known after apply)
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "config/application.json"
      + kms_key_id             = (known after apply)
      + server_side_encryption = (known after apply)
      + storage_class          = (known after apply)
      + tags_all               = (known after apply)
      + version_id             = (known after apply)
    }

  # random_string.bucket_suffix will be created
  + resource "random_string" "bucket_suffix" {
      + id          = (known after apply)
      + length      = 8
      + lower       = true
      + min_lower   = 0
      + min_numeric = 0
      + min_special = 0
      + min_upper   = 0
      + number      = true
      + numeric     = true
      + result      = (known after apply)
      + special     = false
      + upper       = false
    }

Plan: 12 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + dynamodb_table_arn   = (known after apply)
  + dynamodb_table_name  = "user-data-table"
  + lambda_function_arn  = (known after apply)
  + lambda_function_name = "terraform-demo-function"
  + s3_bucket_arn        = (known after apply)
  + s3_bucket_name       = (known after apply)
  + test_commands        = (known after apply)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

random_string.bucket_suffix: Creating...
random_string.bucket_suffix: Creation complete after 0s [id=mrw4e2vk]
aws_iam_role.lambda_role: Creating...
aws_dynamodb_table.user_data: Creating...
aws_s3_bucket.app_storage: Creating...
aws_iam_role.lambda_role: Creation complete after 0s [id=terraform-lambda-role]
aws_dynamodb_table.user_data: Creation complete after 1s [id=user-data-table]
aws_dynamodb_table_item.sample_user_2: Creating...
aws_dynamodb_table_item.sample_user_1: Creating...
aws_dynamodb_table_item.sample_user_2: Creation complete after 0s [id=user-data-table|user_id|user-002]
aws_dynamodb_table_item.sample_user_1: Creation complete after 0s [id=user-data-table|user_id|user-001]
╷
│ Error: creating S3 Bucket (terraform-demo-bucket-mrw4e2vk): operation error S3: CreateBucket, https response error StatusCode: 0, RequestID: , HostID: , request send failed, Put "http://terraform-demo-bucket-mrw4e2vk.localhost:4566/": dial tcp: lookup terraform-demo-bucket-mrw4e2vk.localhost: no such host
│ 
│   with aws_s3_bucket.app_storage,
│   on localstack_main.tf line 2, in resource "aws_s3_bucket" "app_storage":
│    2: resource "aws_s3_bucket" "app_storage" {
│ 
╵
(base) swadhakhatod@Swadhas-MacBook-Air devops-ia1-terraform % terraform apply
random_string.bucket_suffix: Refreshing state... [id=mrw4e2vk]
data.archive_file.lambda_zip: Reading...
data.archive_file.lambda_zip: Read complete after 0s [id=51bec10f9bd051956622551cd21a521e30c81a7c]
aws_iam_role.lambda_role: Refreshing state... [id=terraform-lambda-role]
aws_dynamodb_table.user_data: Refreshing state... [id=user-data-table]
aws_dynamodb_table_item.sample_user_2: Refreshing state... [id=user-data-table|user_id|user-002]
aws_dynamodb_table_item.sample_user_1: Refreshing state... [id=user-data-table|user_id|user-001]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create
  ~ update in-place

Terraform will perform the following actions:

  # aws_dynamodb_table_item.sample_user_2 will be updated in-place
  ~ resource "aws_dynamodb_table_item" "sample_user_2" {
        id         = "user-data-table|user_id|user-002"
      ~ item       = jsonencode(
          ~ {
              ~ email      = {
                  ~ S = "jane.smith@example.com" -> "Swadha@example.com"
                }
              ~ name       = {
                  ~ S = "Jane Smith" -> "Swadha Khatod"
                }
                # (3 unchanged attributes hidden)
            }
        )
        # (2 unchanged attributes hidden)
    }

  # aws_iam_role_policy.lambda_policy will be created
  + resource "aws_iam_role_policy" "lambda_policy" {
      + id          = (known after apply)
      + name        = "terraform-lambda-policy"
      + name_prefix = (known after apply)
      + policy      = (known after apply)
      + role        = "terraform-lambda-role"
    }

  # aws_lambda_function.demo_function will be created
  + resource "aws_lambda_function" "demo_function" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + code_sha256                    = (known after apply)
      + filename                       = "lambda.zip"
      + function_name                  = "terraform-demo-function"
      + handler                        = "lambda_function.handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + package_type                   = "Zip"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = "arn:aws:iam::000000000000:role/terraform-lambda-role"
      + runtime                        = "python3.9"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = "xJLnw0K+JKr8qU06ZgxoVv6A8JGaLAm0dtLwPghoIgo="
      + source_code_size               = (known after apply)
      + tags                           = {
          + "Environment" = "development"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "DemoLambdaFunction"
        }
      + tags_all                       = {
          + "Environment" = "development"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "DemoLambdaFunction"
        }
      + timeout                        = 30
      + version                        = (known after apply)

      + environment {
          + variables = {
              + "DYNAMODB_TABLE" = "user-data-table"
              + "ENVIRONMENT"    = "development"
              + "S3_BUCKET"      = "terraform-demo-bucket-mrw4e2vk"
            }
        }

      + ephemeral_storage (known after apply)

      + logging_config (known after apply)

      + tracing_config (known after apply)
    }

  # aws_s3_bucket.app_storage will be created
  + resource "aws_s3_bucket" "app_storage" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "terraform-demo-bucket-mrw4e2vk"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags_all                    = (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

  # aws_s3_bucket_public_access_block.app_storage_pab will be created
  + resource "aws_s3_bucket_public_access_block" "app_storage_pab" {
      + block_public_acls       = true
      + block_public_policy     = true
      + bucket                  = (known after apply)
      + id                      = (known after apply)
      + ignore_public_acls      = true
      + restrict_public_buckets = true
    }

  # aws_s3_bucket_versioning.app_storage_versioning will be created
  + resource "aws_s3_bucket_versioning" "app_storage_versioning" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + versioning_configuration {
          + mfa_delete = (known after apply)
          + status     = "Enabled"
        }
    }

  # aws_s3_object.readme will be created
  + resource "aws_s3_object" "readme" {
      + acl                    = (known after apply)
      + arn                    = (known after apply)
      + bucket                 = "terraform-demo-bucket-mrw4e2vk"
      + bucket_key_enabled     = (known after apply)
      + checksum_crc32         = (known after apply)
      + checksum_crc32c        = (known after apply)
      + checksum_crc64nvme     = (known after apply)
      + checksum_sha1          = (known after apply)
      + checksum_sha256        = (known after apply)
      + content                = (known after apply)
      + content_type           = "text/markdown"
      + etag                   = (known after apply)
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "README.md"
      + kms_key_id             = (known after apply)
      + server_side_encryption = (known after apply)
      + storage_class          = (known after apply)
      + tags_all               = (known after apply)
      + version_id             = (known after apply)
    }

  # aws_s3_object.sample_config will be created
  + resource "aws_s3_object" "sample_config" {
      + acl                    = (known after apply)
      + arn                    = (known after apply)
      + bucket                 = "terraform-demo-bucket-mrw4e2vk"
      + bucket_key_enabled     = (known after apply)
      + checksum_crc32         = (known after apply)
      + checksum_crc32c        = (known after apply)
      + checksum_crc64nvme     = (known after apply)
      + checksum_sha1          = (known after apply)
      + checksum_sha256        = (known after apply)
      + content                = jsonencode(
            {
              + application = {
                  + environment = "development"
                  + name        = "Terraform Demo App"
                  + version     = "1.0.0"
                }
              + database    = {
                  + table = "user-data-table"
                }
              + lambda      = {
                  + function = "terraform-demo-function"
                }
              + storage     = {
                  + bucket = "terraform-demo-bucket-mrw4e2vk"
                }
            }
        )
      + content_type           = "application/json"
      + etag                   = (known after apply)
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "config/application.json"
      + kms_key_id             = (known after apply)
      + server_side_encryption = (known after apply)
      + storage_class          = (known after apply)
      + tags_all               = (known after apply)
      + version_id             = (known after apply)
    }

Plan: 7 to add, 1 to change, 0 to destroy.

Changes to Outputs:
  + lambda_function_arn  = (known after apply)
  + s3_bucket_arn        = (known after apply)
  + s3_bucket_name       = "terraform-demo-bucket-mrw4e2vk"
  + test_commands        = <<-EOT
        🧪 Test Commands:
        ================
        
        # Test Lambda Function:
        awslocal lambda invoke --function-name terraform-demo-function response.json && cat response.json
        
        # List S3 Objects:
        awslocal s3 ls s3://terraform-demo-bucket-mrw4e2vk/
        
        # Read S3 Object:
        awslocal s3 cp s3://terraform-demo-bucket-mrw4e2vk/README.md - 
        
        # Scan DynamoDB Table:
        awslocal dynamodb scan --table-name user-data-table
        
        # Get specific user from DynamoDB:
        awslocal dynamodb get-item --table-name user-data-table --key '{"user_id":{"S":"user-001"}}'
        
        # LocalStack Web UI:
        open http://localhost:4566/health
    EOT

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_dynamodb_table_item.sample_user_2: Modifying... [id=user-data-table|user_id|user-002]
aws_s3_bucket.app_storage: Creating...
aws_dynamodb_table_item.sample_user_2: Modifications complete after 0s [id=user-data-table|user_id|user-002]
aws_s3_bucket.app_storage: Creation complete after 0s [id=terraform-demo-bucket-mrw4e2vk]
aws_s3_bucket_public_access_block.app_storage_pab: Creating...
aws_s3_bucket_versioning.app_storage_versioning: Creating...
aws_iam_role_policy.lambda_policy: Creating...
aws_lambda_function.demo_function: Creating...
aws_iam_role_policy.lambda_policy: Creation complete after 0s [id=terraform-lambda-role:terraform-lambda-policy]
aws_s3_bucket_public_access_block.app_storage_pab: Creation complete after 0s [id=terraform-demo-bucket-mrw4e2vk]
aws_s3_bucket_versioning.app_storage_versioning: Creation complete after 2s [id=terraform-demo-bucket-mrw4e2vk]
aws_lambda_function.demo_function: Still creating... [00m10s elapsed]
aws_lambda_function.demo_function: Still creating... [00m20s elapsed]
aws_lambda_function.demo_function: Still creating... [00m30s elapsed]
aws_lambda_function.demo_function: Creation complete after 38s [id=terraform-demo-function]
aws_s3_object.readme: Creating...
aws_s3_object.sample_config: Creating...
aws_s3_object.readme: Creation complete after 0s [id=README.md]
aws_s3_object.sample_config: Creation complete after 0s [id=config/application.json]

Apply complete! Resources: 7 added, 1 changed, 0 destroyed.

Outputs:

dynamodb_table_arn = "arn:aws:dynamodb:us-east-1:000000000000:table/user-data-table"
dynamodb_table_name = "user-data-table"
lambda_function_arn = "arn:aws:lambda:us-east-1:000000000000:function:terraform-demo-function"
lambda_function_name = "terraform-demo-function"
s3_bucket_arn = "arn:aws:s3:::terraform-demo-bucket-mrw4e2vk"
s3_bucket_name = "terraform-demo-bucket-mrw4e2vk"
test_commands = <<EOT

🧪 Test Commands:
================

# Test Lambda Function:
awslocal lambda invoke --function-name terraform-demo-function response.json && cat response.json

# List S3 Objects:
awslocal s3 ls s3://terraform-demo-bucket-mrw4e2vk/

# Read S3 Object:
awslocal s3 cp s3://terraform-demo-bucket-mrw4e2vk/README.md - 

# Scan DynamoDB Table:
awslocal dynamodb scan --table-name user-data-table

# Get specific user from DynamoDB:
awslocal dynamodb get-item --table-name user-data-table --key '{"user_id":{"S":"user-001"}}'

# LocalStack Web UI:
open http://localhost:4566/health


EOT
(base) swadhakhatod@Swadhas-MacBook-Air devops-ia1-terraform % awslocal lambda invoke --function-name terraform-demo-function response.json

zsh: command not found: awslocal
(base) swadhakhatod@Swadhas-MacBook-Air devops-ia1-terraform % awslocal lambda invoke --function-name terraform-demo-function response.json && cat response.json
zsh: command not found: awslocal
(base) swadhakhatod@Swadhas-MacBook-Air devops-ia1-terraform % awslocal lambda invoke --function-name terraform-demo-function response.json && cat response.json

[Errno 2] No such file or directory: b'/Users/swadhakhatod/Downloads/flutter/bin/aws'
(base) swadhakhatod@Swadhas-MacBook-Air devops-ia1-terraform % awslocal lambda invoke --function-name terraform-demo-function response.json                     


[Errno 2] No such file or directory: b'/Users/swadhakhatod/Downloads/flutter/bin/aws'
(base) swadhakhatod@Swadhas-MacBook-Air devops-ia1-terraform % awslocal s3 ls s3://terraform-demo-bucket-mrw4e2vk/

[Errno 2] No such file or directory: b'/Users/swadhakhatod/Downloads/flutter/bin/aws'
(base) swadhakhatod@Swadhas-MacBook-Air devops-ia1-terraform % awslocal s3 ls s3://terraform-demo-bucket-mrw4e2vk/

[Errno 2] No such file or directory: b'/Users/swadhakhatod/Downloads/flutter/bin/aws'
(base) swadhakhatod@Swadhas-MacBook-Air devops-ia1-terraform % awslocal lambda invoke --function-name terraform-demo-function response.json && cat response.json
{
    "StatusCode": 200,
    "ExecutedVersion": "$LATEST"
}
{"statusCode": 200, "headers": {"Content-Type": "application/json", "Access-Control-Allow-Origin": "*"}, "body": "{\n  \"message\": \"Hello from Terraform + LocalStack!\",\n  \"environment\": \"development\",\n  \"dynamodb_table\": \"user-data-table\",\n  \"s3_bucket\": \"terraform-demo-bucket-mrw4e2vk\",\n  \"lambda_version\": \"$LATEST\",\n  \"status\": \"success\"\n}"}%                                         (base) swadhakhatod@Swadhas-MacBook-Air devops-ia1-terraform % awslocal s3 ls s3://terraform-demo-bucket-mrw4e2vk/                                              
                           PRE config/
2025-09-24 09:10:18        556 README.md
(base) swadhakhatod@Swadhas-MacBook-Air devops-ia1-terraform % awslocal s3 cp s3://terraform-demo-bucket-mrw4e2vk/README.md - 
# Terraform Demo Infrastructure

This infrastructure was created by Terraform using LocalStack.

## Resources Created:
- S3 Bucket: terraform-demo-bucket-mrw4e2vk
- DynamoDB Table: user-data-table
- Lambda Function: terraform-demo-function

## Environment: development
## Created: 2025-09-24T03:40:18Z

## Testing:
1. Test Lambda: `awslocal lambda invoke --function-name terraform-demo-function response.json`
2. List S3 objects: `awslocal s3 ls s3://terraform-demo-bucket-mrw4e2vk/`
3. Scan DynamoDB: `awslocal dynamodb scan --table-name user-data-table`
(base) swadhakhatod@Swadhas-MacBook-Air devops-ia1-terraform % awslocal dynamodb scan --table-name user-data-table
{
    "Items": [
        {
            "name": {
                "S": "Swadha Khatod"
            },
            "created_at": {
                "S": "2024-01-16T14:22:00Z"
            },
            "user_id": {
                "S": "user-002"
            },
            "email": {
                "S": "Swadha@example.com"
            },
            "status": {
                "S": "active"
            }
        },
        {
            "name": {
                "S": "John Doe"
            },
            "created_at": {
                "S": "2024-01-15T10:30:00Z"
            },
            "user_id": {
                "S": "user-001"
            },
            "email": {
                "S": "john.doe@example.com"
            },
            "status": {
                "S": "active"
            }
        }
    ],
    "Count": 2,
    "ScannedCount": 2,
    "ConsumedCapacity": null
}
(base) swadhakhatod@Swadhas-MacBook-Air devops-ia1-terraform % awslocal dynamodb get-item --table-name user-data-table --key '{"user_id":{"S":"user-002"}}'

{
    "Item": {
        "name": {
            "S": "Swadha Khatod"
        },
        "created_at": {
            "S": "2024-01-16T14:22:00Z"
        },
        "user_id": {
            "S": "user-002"
        },
        "email": {
            "S": "Swadha@example.com"
        },
        "status": {
            "S": "active"
        }
    }
}
(base) swadhakhatod@Swadhas-MacBook-Air devops-ia1-terraform % open http://localhost:4566/health


(base) swadhakhatod@Swadhas-MacBook-Air devops-ia1-terraform % open http://localhost:4566/health


(base) swadhakhatod@Swadhas-MacBook-Air devops-ia1-terraform % 
